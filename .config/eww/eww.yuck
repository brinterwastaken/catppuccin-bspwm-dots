
(defwidget bar []
  (centerbox :orientation "h"
    (launchers)
    (workspaces)
    (sidestuff)))

(defwidget sidestuff []
  (box :orientation "h" :halign "end" :space-evenly false
    (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
      (metric :label "墳"
              :value volume
              :onchange "amixer -D pulse sset Master {}%")
      (metric :label ""
              :value {EWW_RAM.used_mem_perc}
              :onchange "")
      (metric :label "﬙"
              :value {EWW_CPU.avg}
              :onchange "")
      time)
    (box :orientation "h" :space-evenly false :halign "end"
      (eventbox :cursor "hand" (button :class "menu" :onclick "eww open --toggle power" ""))))
)

(defwidget workspaces []
	(box :halign "center" :valign "center"
	(literal :content ws)))
(deflisten ws "./scripts/workspace 0")

(defwidget launchers []
  (box :class "launchers" :orientation "h" :space-evenly false :halign "start"
    (eventbox :cursor "hand" (button :class "menu" :onclick "rofi -show drun &" ""))
    (eventbox :cursor "hand" (box :class "menu" :orientation "h" :space-evenly false :spacing 10
      "Layouts"
      (button :onclick "bspc node -t tiled" (image :path "/home/trinethr/.config/eww/images/tiled.svg" :image-height 18))
      (button :onclick "bspc node -t floating" (image :path "/home/trinethr/.config/eww/images/floating.svg" :image-height 18))
      (button :onclick "bspc node -t pseudo_tiled" (image :path "/home/trinethr/.config/eww/images/pseudo_tiled.svg" :image-height 18))
    ))
    (eventbox :cursor "hand" (box :class "menu" :orientation "h" :space-evenly false :spacing 12
      "Apps"
      (button :onclick "alacritty --working-directory ~ &" "")
      (button :onclick "neovide --multigrid &" "")
      (button :onclick "firefox &" "")
      (button :onclick "discord &" "ﭮ")
      (button :onclick "code &" "﬏")
    ))
    (eventbox :cursor "hand" (button :class "menu" :onclick "eww open --toggle music"
      "Music "
    ))
  )
)


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defpoll uptime :interval "60s"
  "uptime -p | cut -c 4-"
)

(defwidget power []
  (box :class "powermenu" :orientation "v" :space-evenly true :spacing 0
    (box :class "powermenu-title" :valign "start"
      (label :text "Uptime: ${uptime}")
    )
    (eventbox :cursor "hand" (box :class "powermenu-buttons" :orientation "h" :space-evenly true :spacing 0
      (button :onclick "eww close power && shutdown now" "襤")
      (button :onclick "eww close power && reboot" "ﰇ")
      (button :onclick "eww close power && sleep 0.5 && blurlocker & sleep 0.5 && amixer set Master mute && systemctl suspend &" "鈴")
      (button :onclick "eww close power && sleep 0.5 && blurlocker & sleep 0.5 && amixer set Master mute && systemctl hibernate &" "望")
      (button :onclick "eww close power && sleep 0.5 && blurlocker &" "")
    ))
  )
)
(defpoll playerctl :interval "1s"
  "scripts/music"
)
(defwidget music []
  (box :class "player"
    (literal :content playerctl :valign "center")
  )
)
(defwindow power 
  :monitor 0
  :wm-ignore true
  :geometry (geometry :x "-20px"
                      :y "-60px"
                      :width "480px"
                      :height "180px"
                      :anchor "bottom right")
  (power)
)
(defwindow music 
  :monitor 0
  :wm-ignore true
  :geometry (geometry :x "20"
                      :y "20"
                      :width "600"
                      :height "240px"
                      :anchor "top left")
  (music)
)

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "1920px"
                      :height "45px"
                      :anchor "bottom center")
  :reserve (struts :side "bottom" :distance "45px")
  (bar)
)
